[{"title":"C语言——函数（一）","path":"2021/10/09/C-函数(一)/","text":"函数函数要先定义再使用！！！函数要先定义再使用！！！函数要先定义再使用！！！ 1、 为什么要用函数 避免代码冗长 模块化设计思路 按功能划分，每个函数代表一个功能，二函数的名字要体现函数的功能意义，类似变量标识符y=f(x) 2、函数三要素 函数名体现功能 参数列表比如y=f(x)，x就是参数比如z=f(x,y)，x，y就是参数。参数的个数根据需求自定义 返回值比如y=f(x)，y是函数根据x的值和f的功能执行后的结果 3、函数体 执行什么样的功能，涉及的处理代码叫做函数体。 函数的定义和调用1、定义无参函数 函数名后面的括号是空的 123456789 类型名 函数名() &#123; 函数体 &#125;或 类型名 函数名(void) &#123; 函数体 &#125; 2、定义有参数有返回值的函数 如y=f(x+100)，一个返回值，一个参数 123456int getValue(int x)//函数原型&#123; int num; num = x+100; return num;&#125; 如z=f(x+y)，一个返回值，两个参数 123456int getValue(int x,int y)//函数原型&#123; int num; num = x+y; return num;&#125; 3、定义空函数 程序模块设计时占坑 形式参数和实际参数1、说明 在定义函数时，函数名后面括号中的变量名称为“形式参数”（简称“形参”）或“虚拟参数”。在主调用函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”（简称“实参”）。实参可以是常量，变量和表达式。 2、传递参数 传递参数传递的时值。形参和实参的值是相同的，但地址空间不同。 3、局部变量 在函数A中定义变量a，b，又在函数B中定义了变量a，b。A函数中的变量a，b和B函数中的变量a，b不是同一个对象 局部变量的生命周期保存在栈空间，被调用的时候才会为形式参数申请内存，调用结束后，内存会被系统释放。 函数的调用过程 1、内存空间在定义函数中指定的形参，在未出现调用函数时，它们并不占用内存中的储存单元。在发生函数调用时，函数的形参会被临时分配内存单元。 2、值传递将实参对应的值传递给形参 3、值返回通过return语句将函数值带回到主调函数 4、内存释放调用结束，形参单元被释放 函数调用的条件 函数已被定义 调用库函数 #include&lt;stdio.h&gt; 函数的声明用户自己定义的函数如果在调用他的函数（主调函数）的后面，应在主调函数中对被调函数作声明。 函数的嵌套一步步调用，一步步退出"},{"title":"C语言——数组","path":"2021/10/08/C-数组/","text":"一维数组定义一个数组类型符 数组名[常量表达式] ; 1、相同数据类型 定义的时候表示数组中元素的总个数——int temp[10]; 下标法表示数组中的某个元素，从0开始计数； 2、数组数组如何遍历 下标法访问 结合循环语句 地址连续的 3、初始化方式 全部赋值在定义数组时对全部的数组元素赋予初值int temp[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;; 部分赋值可以只给数组中一部分元素赋值int temp[10]=&#123;0,1,2,3,4&#125;; 初始化成0数组中数值全部为0int temp[10]=0; 见怪不怪可不指定数组长度int temp[]=&#123;0,1,2,3&#125; sizeof()关键字sizeof()能计算括号中对应数据的内存空间大小。把整个数组的大小，除以数组中一个元素的大小，就能获得总个数。size = sizeof(temp)/sizeof(temp[0]) 冒泡排序法 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;int main()&#123; int array[] = &#123;12,3,29,7&#125;; int i; int j; int tmp; int len = sizeof(array)/sizeof(array[0]); for(i=0;i&lt;len-1;i++) &#123; for(j=0;j&lt;len-1-i;j++) &#123; if(array[j] &gt; array[j+1]) //从小到大 &#123; tmp = array[j]; array[j] = array[j+1]; array[j+1] = tmp; &#125; &#125; &#125; for(i=0;i&lt;len;i++) &#123; printf(&quot;%d&quot;,array[i]); &#125;&#125; 简单选择排序法 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;int main()&#123; int array[] = &#123;12,3,29,7&#125;; int i; int j; int tmp; int len = sizeof(array)/sizeof(array[0]); for(i=0;i&lt;len-1;i++) &#123; for(j=i+1;j&lt;len;j++) &#123; if(array[i] &gt; array[j]) //从小到大 &#123; tmp = array[i]; array[i]= array[j]; array[j] = tmp; &#125; &#125; &#125; for(i=0;i&lt;len;i++) &#123; printf(&quot;%d&quot;,array[i]); &#125;&#125; 二维数组1、定义一个二维数组二维数组常称之为矩阵。二维数组写成行和列的排序形式，可以有助于形象化地理解二位数组的逻辑结构。 类型说明符 数组名 [常量表达式] [常量表达式]；例如：float a[3][4],b[5][10]; 定义a为3x4的数组，b为5x10的数组； 2、二维数组初始化 只对各行第一列的元素赋初值，其余元素自动为0.int a[3][4]=&#123;&#123;1&#125;,&#123;5&#125;,&#123;9&#125;&#125;; 对各行中的某一元素进行赋初值int a[3][4]=&#123;&#123;1&#125;,&#123;0,6&#125;,&#123;0,0,11&#125;&#125;; 对某几行元素赋初值int a[3][4]=&#123;&#123;1&#125;,&#123;5,6&#125;&#125;; 对全部元素赋初值int a[3][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;与下面的定义等价：int a[][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;//可以不写行，一定要写列 3、二位数组找最大值及对应下表 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;int main()&#123; int i,j,hang,lie,max; int arry[3][4] = &#123;1,12,54,32,48,89,78,31,66,13,44,33&#125;; for(i=0;i&lt;3;i++) &#123; for(j=0;j&lt;4;j++) &#123; printf(&quot;%d \\t&quot;,arry[i][j]); &#125; printf(&quot;\\n&quot;) &#125; max = arry[0][0]; for(i=0;i&lt;3;i++) &#123; for(j=0;j&lt;4;j++) &#123; if(max &lt; arry[i][j]) &#123; max = arry[i][j]; hang = i; lie = j; &#125; &#125; &#125; printf(&quot;其中在第%d行第%d列的数%d最大\\n&quot;,hang+1,lie+1,max);&#125;"},{"title":"C语言——流程控制","path":"2021/10/08/C-流程控制/","text":"C语言语句类型：1、表达式语句包括：运算符表达式语句、赋值语句。 2、流程控制语句包括结构化语句和非结构语句； A.结构化语句包括：条件语句和循环语句； 条件语句包括：if语句和switch语句； 循环语句包括：while语句、do while语句和for语句。 B.非结构化语句包括：限定转向语句和非限定转向语句； 限定转向语句：break语句、continue语句和return语句； 非限定转向语句：goto语句。 3、函数调用语句 4、空语句 5、复合语句 结构化程序设计的核心是算法和控制结构。算法：解决问题时的一系列方法和步骤；主要表示方法：伪代码和流程图。 算法的步骤间有一定的逻辑顺序，此体现为控制结构。分为：顺序结构、分支结构和循环结构。 （1）顺序结构：最简单、最基本，从上往下执行，不进行跳转； 1234567形式：语句1；语句2；语句3； 执行顺序：语句1；》语句2；》语句3；…….. （2）分支结构：有3种：单分支、双分支和多分支；即选择结构，根据条件判断执行程序，成立则执行，反之不执行。 （3）循环结构：当型循环和直到型循环。用于一遍一遍执行程序的某部分，根据条件判断是否执行，重复执行多少次。循环结构：循环条件和循环体 一、条件语句A.if语句a.判断表达式： 1234567 if（判断表达式） &#123; 结构体；&#125; 例子： 1234567891011121314#include&lt;stdio.h&gt;#include&lt;conio.h&gt; //使用getchvoid main(void)&#123; int price=0; printf(&quot;请输入商品价格：&quot;); scanf(&quot;%d&quot;,&amp;price); if(price&lt;50) &#123; printf(&quot;好，我买了&quot;); &#125; getch();&#125; b.花括号和if结构体 123456(1)if（表达式） &#123; 语句1； 语句2； 语句3； &#125; 和 (2)if（表达式） 等价于 if（表达式） 语句1； &#123;语句1；&#125; 语句2； 语句2； 语句3； 语句3； if后边并非必须跟“&#123;&#125;”，如（1）中if条件满足，&#123;&#125;中的块语句都执行；（2）中if条件满足，才执行语句1，语句2和语句3都会执行。 B.if else语句两个选择 123456789形式：if（表达式）&#123; 代码段1&#125;else&#123; 代码段2&#125; if后边的表达式为真，执行代码段1，否则执行代码段2。 例子： 123456789101112131415161718#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int price=0; printf(&quot;请输入商品价格：&quot;); scanf(&quot;%d&quot;,&amp;price); if(price&lt;50) &#123; printf(&quot;好，买了&quot;); &#125; else &#123; printf(&quot;不买&quot;); &#125; getch();&#125; C.if else语句和swich语句多个选择 1234567891011121314151617if（表达式1）&#123; 代码段1&#125;else if（表达式2）&#123; 代码段2&#125; ···else if（表达式m）&#123; 代码段m&#125;else&#123; 代码段m+1&#125; 例子： 1234567891011121314151617#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int a=0; printf(&quot;请输入学生成绩：\\n&quot;); scanf(&quot;%d&quot;,&amp;a); if(a&gt;=90) printf(&quot;A&quot;); if(a&gt;=75 &amp;&amp; a&lt;90) printf(&quot;B&quot;); if(a&gt;=60 &amp;&amp; a&lt;75) printf(&quot;C&quot;); if(a&lt;60) printf(&quot;D&quot;);&#125; D.分支语句嵌套形式： 1234567891011if（表达式1）&#123; if（表达式2） &#123; 代码段1 &#125; else &#123; 代码段2 &#125;&#125; E.开关语句：switch语句多选一形式： 123456789101112131415switch（表达式）&#123; case:（常量表达式1）； 代码段1 break； case:（常量表达式2）； 代码段2 break； …… case:（常量表达式m）； 代码段m break； default： 代码段m+1&#125; 二、循环语句A. while 语句（当型）形式： 12345678910111213141516171819202122232425 while (表达式) &#123; 循环结构体 &#125;``` While语句后边的```&#123;&#125;```为循环体，如果直接跟着```“；”```，说明在while后边表达式为真时，执行空语句，直到表达式为零，跳出while语句。例子：```c#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int sum=0; int i=1; while(i&lt;=100) &#123; sum=sum+i; i=i+1; &#125; printf(&quot;结果是：%d&quot;,sum); getch();&#125; B. do while 语句 （直到型）形式： 12345do&#123; 循环结构体&#125;while（表达式）； //有分号 do while结构中的循环结构体至少会被执行一次，直到while后的表达式非零，跳出do while结构向下执行。 例子： 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int sum=0; int i=100;/* while(i) &#123; sum=sum+i; i--; &#125; */ do &#123; sum=sum+i; i=i-1; &#125; while(i); printf(&quot;结果是：%d&quot;,sum); getch();&#125; C. for 语句 （当型） 形式： 1234 for(初始化表达式；判断表达式；修正表达式)&#123; 循环体&#125; 等价于while结构： 12345while（判断表达式）&#123; 循环体 修正表达式；&#125; for语句比较简洁，其执行过程： a. 计算初始化表达式； b. 计算判断表达式的值，如果其值为真（非0），则执行循环体，并执行c步骤；若为假，则循环结束，转到e步骤； c. 计算修正表达式； d. 转回b步骤执行； e. 循环结束，跳出for循环，向下执行。 注意：for中的表达式可以省略，但是“；；”不能省略； 即： 12345678for( ；；)&#123; ···&#125;``` 等价于 ```cwhile（1） 例子： 12345678910111213141516#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int i,j; for(i=1; i&lt;=4;i++) //外层循环4次 &#123; for(j=1; j&lt;=9;j++) //内层循环9次 &#123; printf(&quot;* &quot;); //后边带俩个空格 &#125; printf(&quot;\\n&quot;); &#125; getch();&#125; 注意：一般内循环次数多余外循环。 D. 跳出循环：break可从死循环中跳出来 适用于3种循环结构，只能用于switch语句，不能跳出if语句和if else语句 例子： 123456789101112131415#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int i=0; while(1) &#123; printf(&quot;Hello\\n&quot;); i++; if(i&gt;5) break; &#125; getch();&#125; E. 重来一次： continuebreak用于结束整个循环结构，而continue语句结束的只是当前一次循环，只是结束本次循环中后续内容，被称为循环继续语句。 F. 随心所欲：goto即：go to，为自由转向语句，可以跳转到任何地方； 形式：goto+标号名 例子： 123456789101112131415#include&lt;stdio.h&gt;#include&lt;conio.h&gt;void main(void)&#123; int i=0; while(1)&#123; printf(&quot;* &quot;); i++; if(i&gt;3) //0到3，输出4个*，退出* goto outside;&#125;outside:printf(&quot;\\n\\n\\n* &quot;);&#125;"},{"title":"C语言——数据认知","path":"2021/10/06/C-数据/","text":"一、printf函数；printf（格式控制，输出列表） 格式声明 原样输出printf(&quot;hello world&quot;); %占位符/格式符printf(&quot;a=%d&quot;,a); d——十进制 c——单个字符——输出一个字母 s——多个字符 f——小数——指定位数 %m.nf x——以16进制格式输出 p——一般打印内存地址，也就是16进制格式输出——输出地址，取变量地址的运算符号&amp; 输出列表 数据类型 表达式 二、scanf函数/扫描键盘scanf（格式控制，地址列表） 地址符号&amp; ：scanf函数中的“格式控制”后面应当是变量地址，而不是变量名 scanf(&quot;%f,%f,%f,&amp;a,&amp;b,&amp;c&quot;); 原样输入 ：如果在“格式控制字符串”中除了格式声明以外还有其他字符，则在输入数据时在对应的位置上输入与这些字符相同的字符。如果有：scanf(&quot;a=%f,b=%f,c=%f,&amp;a,&amp;b,&amp;c&quot;);在输入输入数据时，应在对应的位置输入同样的字符。即输入a=1，b=2,c=3 注意字符在用%c格式声明输入字符时，“空格字符”和“转义字符”中的字符都作为有效字符输入。 混合输入在输入数据数值时，如输入空格，回车，tap键或遇非法字符（不属于数值的字符），认为该数据结束。例如：scanf(&quot;%d%c%f&quot;,&amp;a,&amp;b,&amp;c); 三、其他 getchar putchar puts gets puts跟printf的区别 1.自动加入换行符 2.printf支持多种输出，而puts就是输出字符串 四、练习 1.例：键盘输入大写字母输出相应的小写字母 123456789101112131415161718#include&lt;stdio.h&gt;&#123;char a = &#x27;a&#x27;;char A = &#x27;A&#x27;;cahr b;printf(&quot;%c,%c\\n&quot;,a,A);printf(&quot;%d,%d\\n&quot;,a,A);puts(&quot;请输入一个大写字母\\n&quot;);scanf(&quot;%c&quot;,&amp;b);printf(&quot;对应的小写字母是 %c&quot;，b+32);printf(&quot;测试&quot;)；getchar();//吸收回车符，来源于scanf。当你分多次连续scanf获得字符的时候，要注意回车符。putchar(getchar()+32);return 0;&#125; 将“China”编译成原来字母后面第四个字母代替的字母，即“China” -&gt;“Glmre”。分别用putchar函数和printf函数输出。 1234567891011121314151617#include &lt;stdio.h&gt; int main() &#123; char a,b,c,d,e; printf(&quot;please\\n&quot;); scanf(&quot;%c%c%c%c%c%c&quot;,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e); printf(&quot;print: %c%c%c%c%c\\n&quot;,a+4,b+4,c+4,d+4,e+4); printf(&quot;text: &quot;); putchar(a+4); putchar(b+4); putchar(c+4); putchar(d+4); putchar(e+4); return 0; &#125;"},{"title":"C语言——初识变量","path":"2021/10/06/C-变量/","text":"C语言的基础框架 1、一个c语音程序有且只有一个main函数，且必须有一个main函数主函数 2、注释不参与编译和执行，只是给别人看的。 3、C程序是由函数构成的，函数是c程序的基本单位，编写c程序也就是编写一个个函数（模块化）。 4、一个函数由两部分组成：1 函数的首部，包括函数类型，函数名，函数参数类型，函数参数名。2函数体，花括号部分。 5、程序=数据结构+算法 数据结构：对数据的描述，数据类型和数据的组织形式 算法：对操作的描述，即操作步骤 数据类型 1、变量的属性：声明一条变量，同时给他赋初值int a=0；等价于int a;a=0;从这个例子我们可以看到： 第一个属性：变量是有值的。我们给他赋值为0，就相当于他的内存单元里边存的是0，不再是随机数了。 第二个属性：变量的名，a就是他的名字。 第三个属性：变量的地址，你存到哪里了？值存在哪里？ 第四个属性：变量被分配的内存大小；因为不是整个内存都归他管，你到底占多大的内存空间呢？有一个分配的内存大小。 2、变量的类型决定了变量被分配内存空间的大小。内存是计算机内的存储部件，代码和数据都存在其中。 3、内存的特点：所有指令和数据都保存在内存里，速度快，可随机访问，但掉电即失去（掉电就没了）。 4、变量的类型决定了什么？ 占用内存空间的大小； 数据的存储形式；(在Inter 的CPU上面，这个整型数他的存储是低位字节在前高位字节在后，相当于脚先进去；实型数的存储稍微复杂一点，我们通常说是定点数，但是在计算机中保存是按照浮点数来保存的；) 合法的取值范围； 可参与的运算种类； 5、C语言中的数据类型被分为两大类： （1）基本数据类型：处理一个一个数据的，单个数据的这么一种数据类型。 （2）构造数据类型：可以把若干个基本数据类型的数据组织起来，形成一个更加复杂的一个类型。 C语言提供的基本数据类型有： 6、有符号和无符号： 解释成有符号数的话最高位是符号位，符号位为1的时候表明它是一个负数；为0的时候表示他是一个正数。但是如果把它解释成一个无符号数的话，最高位呢就作为一个数据位，而不是一个符号位了，所以就不再是表示正负的问题了，他都作为一个数据位来解释了。 整型int型：代表整数，包含正整数和负整数。 声明变量： 12//声明int变量int num; 初始化变量：（未被初始化的变量，其值为随机数（乱码）） 12//初始化int变量int num=5; int类型的常量：不含小数点和指数的数字，一般都是一个整型的常量。 整型的常量在C语言当中可以有三种表示方法：十进制、八进制和十六进制。 输出： 123456//以十进制输出printf(&quot;%d&quot;,num);//以8进制输出printf(&quot;%o&quot;,num);//以16进制输出printf(&quot;%x&quot;,num); 其他的整型类型： short int可以简写为short；如果程序里处理的这个整数比较小，可以把它看成是一个short int类型的；如果说这一个变量是一个short int类型，那么我们在输出的时候就在输出的这个格式控制符之前加上一个h;short int类型的变量也可以用8进制、10进制和16进制输出，那么他对应的格式控制字符呢就是hd,ho,hx;这就表示以10进制输出一个短整型数，以8进制输出一个短整型数，以16进制输出一个短整型数。 输出短整型： 1printf(&quot;%hd,%ho,hx&quot;,num,num,num) long int 长整型，就是比整型表示范围更大的一个整型类型 输出长整型：123L(数字后面的L就表示是长整型，告诉编译器我把这个整数看成是长整型的，而不是int类型）。 假如说在我这个编译器里边长整型是占用8个字节，那在输出的时候你就要告诉printf函数你不是取4个字节，你应该取8个字节的值来输出，我们用一个字母“l”来表示,长整型数同样是可以用8进制、16进制来表示，但是输出的时候呢我们在格式控制符前边加上一个l； 输出长整型： 1printf(&quot;%ld,%lo,lx&quot;,num,num,num); unsigned int、unsigned short、unsigned long 无符号，都是整数（非负整数） 输出无符号整型： 12//对应输出unsigned int、unsigned short、unsigned long;printf(&quot;%u,%hu,%lu&quot;,num,snum,lnum); 字符型 变量声明：（字符类型用关键字 char表示）1char ch; 输出字符：（用格式控制字符%c） 注意单引号5和整数5的区别：&#39;5&#39;是一个字符型和整数5它是一个整型 1234char ch=&#x27;a&#x27;;printf(&quot;%c&quot;,ch);//屏幕上将会显示a(相当于%c用a代替)printf(&quot;%d&quot;,ch);//输出97，相当于使用的是内码输出printf(&quot;%c\\n%c&quot;,ch,ch);//输出一个a之后换行再输出一个a 奇偶校验 奇偶校验指代码输出过程中是否出现错误。奇偶校验规定，若一个字节编码序列中1的个数是奇数，则校验位置1，否则置0，偶校验与其正好相反。 ASCII码 ASCII码是有127个，但是我们一个字节可以表示255个，还剩下127个，所以我们有了ASCII码的扩展码，ASCII扩展码就是利用了他的最高位，把他的最高位不用做奇偶校验。利用他的最高位来使他的值在128到255之间，也定义了一些相关的字符；ASCII码的扩展码包括英文制表符、部分音标字符和其他字符。 上边是英文字符我们表示成功了，那么汉字怎么存储呢？英文字符使用的是一个字节，汉字使用几个字节呢？汉字使用两个字节。那我怎么区分存储在内存中的这两个字节是两个字符呢还是一个汉字呢？汉字也有编码，为了兼容ASCII码，那我们规定，连续两个字节他的第7位都为1的时候就是一个汉字，就和ASCII码区别啦。 浮点型浮点型是专门用来处理实数的工具。实数在计算机里面是用浮点的形式来表示的，所以我们把它称之为浮点类型。 声明浮点变量： 浮点类型：float（单精度实型）、double、long double（这三个类型和int、short、long 是一样的，float是处理比较小的实型数，double是处理一般的实型数，long double是处理比较大的实型数） 1234//声明浮点变量float x1,x2；\\\\声明的时候赋初值float x1=2.7,x2;//声明之后x1的值就是2.7，x2的值就是一个随机数。 浮点型常量： 如果说一个实型数的值已经定了，那我们可以把这个实型数直接写在程序里边，这就是浮点型的常量； 12345678十进制表示：123.456 -0.879科学计数法表示1.5E18 1.5x10^18float类型的常量表示123.456F -0.188flong double类型的常量表示123.465L -0.188l 浮点数输出 %f：十进制输出 123456float f1 = 123.2 double d1 = 1.5E3printf(&quot;%f %f&quot;,f1,d1);123.199998 1500 %e:科学计数法表示 123456float f1 = 123.2 double d1 = 1.5E3printf(&quot;%e %e&quot;,f1,d1);1.232000e+002 1.500000e+003 %Lf,%Le:Long double 类型的常量表示 1234long double d1 = 1.5E3;printf(&quot;%Lf %Le&quot;,d1,d1)1500.000000 1.5000000e+003 float和double的精度： 采用单精度类型和双精度类型来存储浮点类型的数据时，假如float占用32bit，double数据占用64bit时，那么我们在声明一个变量float a=2.55的时候，是如何进行内存分配的呢？如果胡乱毫无规则的分配就会乱套。其实不管是float还是double在存储方式上都是遵从IEEE的规范的，float遵从的是IEEE R32.24，而double遵从的是R64.53。 由上边数据类型的介绍我们知道，单精度还是双精度在存储中都分为3部分： （1）符号位(sign)：0代表正，1代表负； （2）指数位(exponent)：用于存储科学计数法中的指数数据，并且采用移位存储； （3）尾数部分(mantissa)：尾数部分； 12345678910float： double:1bit（符号位） 1bit（符号位）； 8bit（指数位） 11bit（指数位）;23bit（尾数位\\有效数字位）； 52bit（尾数位）；共32位； 共64位；"},{"title":"C语言——基于Vscode开发环境搭建","path":"2021/10/05/C-环境/","text":"要在VSCode中配置C语言环境，我们首先可能要一个VSCode（废话），所以先下载安装一个VSCode；然后肯定需要相关插件，因为VSCode不能直接拿来写C；然后任何语言的程序在运行前都需要编译，那还需要一个编译器，很可惜VSCode插件里面不自带，所以要自己下载然后配置；最后在VSCode中进行相关配置，就可以啦 1. VsCode（system版） VsCode vscode插件 Chinese（simplifled）Language Pack ——官方汉化包 C/C++ （编辑器） 2.MinGW MinGW 下载完成后解压到你指定的文件夹： 然后配置环境变量 找到这个文件夹内的一个叫bin的文件夹： 然后把它的地址复制一下，找到此电脑（或者我的电脑）——&gt;右键——&gt;属性 然后进入到下面这个页面，打开高级系统设置： 在弹出的页面中选择“高级”分页，找到环境变量，单击打开： 然后在环境变量中的系统变量中，找到Path变量： 打开之后将刚刚复制的地址添加进去： 然后测试环境配置是否成功：crtl+R快捷键打开运行窗口，在里面输入cmd，回车打开cmd.exe在cmd.exe中输入如下命令：gcc -v -E -x c++ -如果运行结果像下方图片中这样，就配置成功了: 3.工程搭建先新建一个文件夹作为C语言项目文件，然后点击菜单栏中的文件——&gt;打开文件夹，找到刚才新建的文件夹，然后点击选择文件夹打开这个项目文件。在里面新建一个text.c文件（名字随便起，以.c结尾就行了），然后再建一个.vscode文件夹（注意前面有个点）。c文件里面写入万恶之源”hello world”:打开终端输入 12gcc text.c ./a.exe 运行成功，走你！"},{"title":"基于mpvue框架搭建微信小程序","path":"2021/10/03/vue-weapp/","text":"一、环境配置1. 微信开发者工具（稳定版） 微信开发者工具 微信小程序官方文档 2. node.js node.js PowerShell输入命令node --version和npm --version检测是否安装成功。 1234PS C:\\WINDOWS\\system32&gt; node --versionv16.10.0PS C:\\WINDOWS\\system32&gt; npm --version7.24.1 3. Vue-CLI 🛠️ Vue.js 开发的标准工具 可以使用下列任一命令安装这个新的包：npm install -g @vue/cli 运行vue --version命令来检查其版本是否正确: 12PS C:\\WINDOWS\\system32&gt; vue --version@vue/cli 4.5.13如需升级全局的 Vue CLI 包，请运行： npm update -g @vue/cli 如需卸载全局的 Vue CLI 包，请运行： npm uninstall vue-cli -g 4. VsCode（system版） VsCode vscode插件 Chinese（simplifled）Language Pack ——官方汉化包 minapp ——小程序格式化 vetur ——vue语法格式化 vscode-icons ——vscode ide 文件图标（可选） Bracket Pair Colorizer 2 ——花括号代码高亮（可选） 二、工程搭建1.环境检测再次运行命令node --version、npm --version、vue --version 检测环境是否安装完整: 123456PS C:\\WINDOWS\\system32&gt; node --versionv16.10.0PS C:\\WINDOWS\\system32&gt; npm --version7.24.1PS C:\\WINDOWS\\system32&gt; vue --version@vue/cli 4.5.13 2.工程生成 mvpue快速上手在vscode的终端中执行vue init mpvue/mpvue-quickstart my-project命令快速搭建工程: 123456789101112131415Windows PowerShell版权所有（C） Microsoft Corporation。保留所有权利。安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindowsPS E:\\&gt; vue init mpvue/mpvue-quickstart my-project ? Project name my-project? wxmp appid touristappid? Project description A Mpvue project? Author dushiyi2333 &lt;1061133261@qq.com&gt;? Vue build runtime? Use Vuex? No? Use ESLint to lint your code? No? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能 执行以下命令运行工程： 进入创建工程文件夹 cd my-project 安装依赖 npm install 运行程序 npm run dev1DONE Compiled successfully in 2247ms 走你！"},{"title":"月明星稀","path":"2021/10/03/hello-world/","text":"道德是一种自律，而不是他律。"}]